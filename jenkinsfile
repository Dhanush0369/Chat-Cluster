pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub-creds'
        FRONTEND_IMAGE_NAME = 'dhanush789245/chat-frontend'
        BACKEND_IMAGE_NAME = 'dhanush789245/chat-backend'
        FRONTEND_YAML = 'k8s_manifest/frontend.yaml'
        BACKEND_YAML = 'k8s_manifest/backend.yaml'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/Dhanush0369/Chat-Cluster.git', branch: 'main'
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Frontend Image') {
                    steps {
                        script {
                            docker.build("${FRONTEND_IMAGE_NAME}:latest", "-f frontend/Dockerfile frontend/")
                        }
                    }
                }
                stage('Build Backend Image') {
                    steps {
                        script {
                            docker.build("${BACKEND_IMAGE_NAME}:latest", "-f Dockerfile .")
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            parallel {
                stage('Push Frontend Image') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                                docker.image("${FRONTEND_IMAGE_NAME}:latest").push('latest')
                            }
                        }
                    }
                }
                stage('Push Backend Image') {
                    steps {
                        script {
                            docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                                docker.image("${BACKEND_IMAGE_NAME}:latest").push('latest')
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'argocd-credentials', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASS')]) {
                        sh '''
                        argocd login localhost:8081 --username $ARGOCD_USER --password $ARGOCD_PASS --insecure
                        
                        argocd app sync chat-cluster --insecure
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
